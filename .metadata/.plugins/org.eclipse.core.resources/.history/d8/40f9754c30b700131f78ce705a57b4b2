package se.jronn.astrodefence.model;

import java.util.Random;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.utils.Pool.Poolable;

/**
 * Represents a single meteor
 * 
 * @author Greedy
 * @since 2014-03-06
 * @version 1.0
 */
public class Meteor extends Sprite implements Poolable{
	
	private static final float ROTATION_SPEED = 20.0f;
	private float velX, velY;
	private float moveSpeed;
	
	
	//size constructor parameter indicates the maximum size the meteor can have
	public Meteor(TextureRegion txtReg) {
		super(txtReg);
		moveSpeed = Gdx.graphics.getHeight()/20;
	}
	
	/**
	 * Moves the asteroid towards the center (earth).
	 */
	public void move(float delta) {
		super.setPosition(super.getX() + velX * delta, super.getY() + velY * delta);
		this.rotate(ROTATION_SPEED * delta);
	}
	
	public void init() {
		moveSpeed = speed;
		
		Random rand = new Random();
		
		//Random between 0.5 and 1
		float myscale = rand.nextFloat()*0.5f + 0.5f;
		
		//Set size to 10% of screen height in both width and height
		super.setSize(myscale * Gdx.graphics.getHeight()/10, myscale * Gdx.graphics.getHeight()/10); 
		
		//Set point of origin for rotation and scaling
		super.setOrigin(getWidth()/2, getHeight()/2);
		
		//Spawn at random location outside of screen
		switch(rand.nextInt(4)) {
			case 0: super.setPosition(-getWidth(), (Gdx.graphics.getHeight() - getHeight()/2) * rand.nextFloat());
				break;
			case 1: super.setPosition(Gdx.graphics.getWidth(), (Gdx.graphics.getHeight() - getHeight()/2) * rand.nextFloat());
				break;
			case 2: super.setPosition((Gdx.graphics.getWidth() - getWidth()/2) * rand.nextFloat(), -getHeight());
				break;
			case 3: super.setPosition((Gdx.graphics.getWidth() - getWidth()/2) * rand.nextFloat(), Gdx.graphics.getHeight());
				break;
			default: super.setPosition(-getWidth(), (Gdx.graphics.getHeight() - getHeight()/2) * rand.nextFloat());
				break;
		}
		
		//Set the speed so that meteor moves towards center, at slightly random speed
		setTarget(Gdx.graphics.getWidth()/2, Gdx.graphics.getHeight()/2);
	}
	
	public void setTarget(float x, float y) {
		Random rand = new Random();
		float randVel = 1 - ((float)(rand.nextInt(5)+1)/10);
		float angle = (float)Math.atan2(y-getHeight()/2 - getY(), x-getWidth()/2 - getX());
		velX = moveSpeed * (float)Math.cos(angle) * randVel;
		velY = moveSpeed * (float)Math.sin(angle) * randVel; 
	}

	@Override
	public void reset() {
		init(0);
	}

}
